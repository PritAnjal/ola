<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="bookmyholiday-ola-sys-api-interface-suite.xml" />
<munit:test name="deleteBookingDetails-test1" doc:id="dff5f728-a35a-4d0d-bc5c-cd2a590dd394" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock DeleteBooking" doc:id="d5ae7c3d-1282-4f04-a96a-dd0e61c43e1c" processor="db:delete">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="092c4472-2e95-4a46-9e32-30d4db0b453f" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://deleteBookingDetailstest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://deleteBookingDetailstest\mock_variable_.dwl')]" />
						<munit-tools:variable key="ID" value="#[output application/java --- readUrl('classpath://deleteBookingDetailstest\mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="a25ed5d0-f892-4834-bfff-9b9bbae72de9" >
				<munit:payload value="#[readUrl('classpath://deleteBookingDetailstest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://deleteBookingDetailstest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://deleteBookingDetailstest\set-event_variable_.dwl')]" />
					<munit:variable key="ID" value="#[output application/java --- readUrl('classpath://deleteBookingDetailstest\set-event_variable_1.dwl')]" encoding="UTF-8" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to deleteBookingDetails" doc:id="b7cadb17-18a1-43ea-8df0-3534e638804a" name="deleteBookingDetails"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="5fb79cfd-fed3-45ed-8e58-d3c6d7338d2a" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import deleteBookingDetailstest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="postCarBooking-test1" doc:id="e4d1a165-88e5-48c6-adff-289b2f994507" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Insert The Booking Records" doc:id="862ab1cf-b37a-402f-94c7-0a24fb868ed1" processor="db:insert">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="a892a946-3b3a-40e3-b24d-fb26d506d2f9" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://postCarBookingtest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://postCarBookingtest\mock_variable_.dwl')]" />
						<munit-tools:variable key="bookingId" value="#[readUrl('classpath://postCarBookingtest\mock_variable_1.dwl')]" encoding="UTF-8" />
						<munit-tools:variable key="Name" value="#[output application/json --- readUrl('classpath://postCarBookingtest\mock_variable_2.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Set Variable" doc:id="8f6e89e4-d494-4a88-9374-9fd64bdabe97" processor="set-variable">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="40097fa9-92bc-48ea-b0dc-253e5e462d3c" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://postCarBookingtest\mock_variable_3.dwl')]" />
						<munit-tools:variable key="bookingId" value="#[readUrl('classpath://postCarBookingtest\mock_variable_4.dwl')]" encoding="UTF-8" />
						<munit-tools:variable key="Name" value="#[output application/json --- readUrl('classpath://postCarBookingtest\mock_variable_5.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Set Variable" doc:id="91d05a72-37c8-4a41-9d17-be26f4f05ba6" processor="set-variable">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="2cad656c-a6bb-45b2-a1e3-68158cdbcb66" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://postCarBookingtest\mock_variable_6.dwl')]" />
						<munit-tools:variable key="bookingId" value="#[readUrl('classpath://postCarBookingtest\mock_variable_7.dwl')]" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="32dc106a-dacb-4117-b07b-4a1c075c8266" >
				<munit:payload value="#[output application/json --- readUrl('classpath://postCarBookingtest\set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://postCarBookingtest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://postCarBookingtest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to postCarBooking" doc:id="00e457e4-fcd4-400c-b26a-01b000558c15" name="postCarBooking"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="2da8698e-8c8e-4c4d-9bd4-077fb2dc9b7d" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import postCarBookingtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="getCarDetails-test1" doc:id="b58d0fcf-806e-416e-9ab7-a30b25249752" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Select all records" doc:id="d33ba539-35b2-44dd-b918-37cb5da42c62" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="e8be6644-138c-4a87-bee9-e300b586eb12" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://getCarDetailstest\mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getCarDetailstest\mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="af029e18-9c62-4177-8165-9e035a6a7f93" >
				<munit:payload value="#[readUrl('classpath://getCarDetailstest\set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getCarDetailstest\set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getCarDetailstest\set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getCarDetails" doc:id="152d6836-b222-46bc-ae5f-49c9090db8b8" name="getCarDetails"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="f71ff29a-5804-4946-970f-ed9a9c838193" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getCarDetailstest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>

</mule>
